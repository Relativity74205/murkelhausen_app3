"""
Django settings for family_intranet project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

from pydantic import BaseModel

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO__SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.environ.get("DJANGO__DEBUG", "False"))

ALLOWED_HOSTS = os.environ.get("DJANGO__ALLOWED_HOSTS", "127.0.0.1").split(",")


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_htmx",
    "core",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_htmx.middleware.HtmxMiddleware",
]

ROOT_URLCONF = "family_intranet.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "core.context_processors.htmx_timeout",
            ],
        },
    },
]

WSGI_APPLICATION = "family_intranet.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST": "192.168.1.69",
        "USER": os.environ.get("POSTGRES_USER"),
        "DBNAME": os.environ.get("POSTGRES_DBNAME"),
        "PORT": 5432,
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
        "TIME_ZONE": "Europe/Berlin",
        "NAME": os.environ.get("POSTGRES_DBNAME"),
    },
    "report": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST": "192.168.1.69",
        "USER": os.environ.get("POSTGRES_USER"),
        "DBNAME": "murkelhausen_datastore",
        "OPTIONS": {"options": "-c search_path=report"},
        "PORT": 5432,
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
        "TIME_ZONE": "Europe/Berlin",
        "NAME": "murkelhausen_datastore",
    },
    "data": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST": "192.168.1.69",
        "USER": os.environ.get("POSTGRES_USER"),
        "DBNAME": "murkelhausen_datastore",
        "OPTIONS": {"options": "-c search_path=data"},
        "PORT": 5432,
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
        "TIME_ZONE": "Europe/Berlin",
        "NAME": "murkelhausen_datastore",
    },
}


DATABASE_ROUTERS = ["murkelhausen_info.routers.MurkelhausenInfoRouter"]

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "de-DE"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
PODCASTINDEX_API_KEY = "XMU8WGRYU7PPGSMQ9TQT"
PODCASTINDEX_API_SECRET = os.environ.get("PODCASTINDEX_API_SECRET")
PIHOLE_PRIMARY_PASSWORD = os.environ.get("PIHOLE_PRIMARY_PASSWORD")
PIHOLE_BACKUP_PASSWORD = os.environ.get("PIHOLE_BACKUP_PASSWORD")
OPENWEATHERMAP_API_KEY = os.environ.get("OPENWEATHERMAP_API_KEY")

# HTMX timeout in milliseconds (default: 30 seconds)
HTMX_TIMEOUT = int(os.environ.get("HTMX_TIMEOUT", "10000"))


class GoogleCalendarSettings(BaseModel):
    api_key: str
    private_key_id: str
    project_id: str
    client_email: str
    client_id: str
    client_x509_cert_url: str
    calendars: dict[str, str]


GOOGLE_CALENDAR_SETTINGS = GoogleCalendarSettings(
    api_key=os.environ.get("GOOGLE_PRIVATE_KEY", "placeholder"),
    private_key_id="3824b92878cacd7dbdca0ad9000a0d76962f697f",
    project_id="murkelhausen",
    client_email=os.environ.get("GOOGLE_CLIENT_EMAIL", "placeholder"),
    client_id="100602016701161296682",
    client_x509_cert_url="https://www.googleapis.com/robot/v1/metadata/x509/murkelhausen2%40murkelhausen.iam.gserviceaccount.com",
    calendars={
        "Arkadius": os.environ.get("GOOGLE_CALENDAR_ARKADIUS", "placeholder"),
        "Familie": os.environ.get("GOOGLE_CALENDAR_FAMILIE", "placeholder"),
        "Erik": os.environ.get("GOOGLE_CALENDAR_ERIK", "placeholder"),
        "Mattis": os.environ.get("GOOGLE_CALENDAR_MATTIS", "placeholder"),
        "Andrea": os.environ.get("GOOGLE_CALENDAR_ANDREA", "placeholder"),
        "Geburtstage": os.environ.get("GOOGLE_CALENDAR_GEBURTSTAGE", "placeholder"),
    },
)

# Outlook Work Calendar (ICS feed)
OUTLOOK_CALENDAR_URL = os.environ.get(
    "OUTLOOK_CALENDAR_URL",
    "https://outlook.office365.com/owa/calendar/ab698696d55f495da6d8087de90e6bf8@auxmoney.com/224d53aba3a64df69329d8567eace684477164590746596125/S-1-8-1202830513-731510667-3198393615-1294255192/reachcalendar.ics",
)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "default": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
        "base": {
            "format": "%(asctime)s [%(levelname)s] %(name)s - %(message)s",
        },
        "routes": {
            "format": "%(asctime)s - %(message)s",
        },
    },
    "handlers": {
        "base": {
            "class": "logging.StreamHandler",
            "formatter": "base",
        },
        "routes": {
            "class": "logging.StreamHandler",
            "formatter": "routes",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["routes"],
            "level": "INFO",
            "propagate": False,
        },
        "root": {
            "handlers": ["base"],
            "level": "INFO",
        },
    },
}
